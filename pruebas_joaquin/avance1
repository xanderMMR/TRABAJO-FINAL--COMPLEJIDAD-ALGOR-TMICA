import matplotlib.pyplot as plt
import numpy as np
import random as rnd

from mpl_toolkits.mplot3d import Axes3D
from itertools import product, combinations

with open("prueba.txt", "r") as archives:
    lines = archives.readlines()
    m=lines[0].split()
    beginning=2
    end=len(lines)-beginning
    Len_Container=[int(m[0]),int(m[1]),int(m[2])]
    letter=[None]*end
    arrX=[None]*end
    arrY=[None]*end
    arrZ=[None]*end
    blocks=[None]*end
    for beginning in range(end):
        x=lines[beginning+2].split()
        letter[beginning]=x[1]
        arrX[beginning]=int(x[2])
        arrY[beginning]=int(x[3])
        arrZ[beginning]=int(x[4])
        blocks[beginning]=[arrX[beginning],arrY[beginning],arrZ[beginning]]
        
#sort dimension of blocks, X is > and Z is <
for beginning in range(end):
    maximum=max(blocks[beginning])
    minimum=min(blocks[beginning])    
    auxX=arrX[beginning]
    auxZ=arrZ[beginning]
    arrX[beginning]=maximum
    arrZ[beginning]=minimum

    if maximum == arrY[beginning]:
        arrY[beginning]=auxX

    elif minimum == arrY[beginning]:
        arrY[beginning]=auxZ

    blocks[beginning]=[arrX[beginning],arrY[beginning],arrZ[beginning]]

#draws the size of container
Contai=[[0,Len_Container[0]],[0,Len_Container[1]],[0,Len_Container[2]]]
fig = plt.figure()
ax = fig.gca(projection='3d')
arrBoxes=[]
arrBoxes.append(Contai)
contador=0


#Sorting boxes from "max" to "min" sizes in X coordinate 
def pick_X_to_sort(elem):
    return int(elem[0])
  
def sortblocks():
    blocks.sort(key=pick_X_to_sort,reverse=True)
sortblocks()

#initializing positions
posX=[0]*end
posY=[0]*end
posZ=[0]*end
X=[None]*end
Y=[None]*end
Z=[None]*end   

#this are limits for the coordinates X, Y and Z to not exceed the established container
def check_if_exceed_X(i):
    if i!=0:
        if arrY[beginning-1]+posY[beginning-1] + ((arrY[beginning]+auxArrY[beginning-1]) - (arrY[beginning-1]+posY[beginning-1]))>int(m[1]):
            return True
        
def check_if_exceed_Y(i):    
    if posX[i]+arrX[i]>int(m[0]):
        return True

def check_if_exceed_Z(i,size):
    if posZ[i]+arrZ[i]>int(size):
        return True

#arranging positions from X,Y and Z
def arrange_positions():
    for beginning in range(end):
        arrX[beginning]=blocks[beginning][0]
        arrY[beginning]=blocks[beginning][1]
        arrZ[beginning]=blocks[beginning][2]
arrange_positions()

