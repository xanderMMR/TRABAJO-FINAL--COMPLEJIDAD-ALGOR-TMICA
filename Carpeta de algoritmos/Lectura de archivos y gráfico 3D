from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
from itertools import product, combinations
import random as rnd

with open("texto.txt", "r") as archivo:
    lines= archivo.readlines()
    m=lines[0].split()
    start=2
    end=len(lines)-start
    cantidadCajas= int(lines[1])+1
    tama単oContainer=[int(m[0]),int(m[1]),int(m[2])]
    ID=[None]*end
    arrX=[None]*end
    arrY=[None]*end
    arrZ=[None]*end
    for start in range (end):
        x=lines[start+2].split()
        ID[start]=x[1]
        arrX[start]=int(x[2])
        arrY[start]=int(x[3])
        arrZ[start]=int(x[4])
posicionContainer=[0,0,0]

Contai=[[0,tama単oContainer[0]],[0,tama単oContainer[1]],[0,tama単oContainer[2]]]


fig = plt.figure()
ax = fig.gca(projection='3d')
arrCajas=[]
arrCajas.append(Contai)

bloques=[None]*end
posX=[None]*end
posY=[None]*end
posZ=[None]*end
X=[None]*end
Y=[None]*end
Z=[None]*end

for start in range (end):
    posX[start]=rnd.randint(0,10)
    posY[start]=rnd.randint(0,15)
    posZ[start]=rnd.randint(0,10)
    X[start]=[posX[start],arrX[start]]
    Y[start]=[posY[start],arrY[start]]
    Z[start]=[posZ[start],arrZ[start]] 
    if posX[start]>arrX[start]:
        X[start]=[arrX[start],posX[start]]
    if posY[start]>arrY[start]:
        Y[start]=[arrY[start],posY[start]]
    if posZ[start]>arrZ[start]:
        Z[start]=[arrZ[start],posZ[start]]
    ubicacion=[X[start],Y[start],Z[start]]
    arrCajas.append(ubicacion)
    print (ID[start],"PosX=",posX[start],"PosY=",posY[start],"PosZ=",posZ[start],"largo",arrX[start],"ancho",arrX[start],"alto",arrZ[start])

    

rgb=[None]*len(arrCajas)
print(rgb)

for i in range(len(arrCajas)):
    r=rnd.randint(0,1)
    g=rnd.randint(0,1)
    b=rnd.randint(0,1)
    rgb[i]=[r,g,b]
rgb[0]=[0,0,0]     
for k in range (len(arrCajas)):
    for s, e in combinations(np.array(list(product(arrCajas[k][0],arrCajas[k][1],arrCajas[k][2]))), 2):
        if np.sum(np.abs(s-e)) == arrCajas[k][0][1]-arrCajas[k][0][0] or np.sum(np.abs(s-e)) == arrCajas[k][1][1]-arrCajas[k][1][0] or np.sum(np.abs(s-e)) == arrCajas[k][2][1]-arrCajas[k][2][0] :
            ax.plot3D(*zip(s,e), color=rgb[k])
    print(k)
plt.show()
